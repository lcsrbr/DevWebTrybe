USE sakila;
-- INNER JOIN
-- Monte uma query que exiba o id do ator, nome do ator e id do filme em que ele j√° atuou, usando as tabelas actor e film_actor.

SELECT a.actor_id, CONCAT(a.first_name, " ", a.last_name), f.film_id
FROM actor AS a
INNER JOIN film_actor AS f 
ON a.actor_id = f.actor_id;

-- Use o JOIN para exibir o nome, sobrenome e endere√ßo de cada um dos funcion√°rios do banco. Use as tabelas staff e address.

SELECT CONCAT(s.first_name,' ', s.last_name) 'name', CONCAT(a.address,', ', a.district) 'address'
FROM staff AS s
INNER JOIN address AS a ON a.address_id = s.address_id;

-- Exiba o id do cliente, nome e email dos primeiros 100 clientes, ordenados pelo nome em ordem decrescente, juntamente com o id do endere√ßo e o nome da rua onde o cliente mora. Essas informa√ß√µes podem ser encontradas nas tabelas customer e address.

SELECT
    c.customer_id,
    c.first_name,
    c.email,
    c.address_id,
    a.address
FROM
    customer AS c
INNER JOIN
    address AS a ON c.address_id = a.address_id
ORDER BY c.first_name DESC
LIMIT 100;

-- Exiba o nome, email, id do endere√ßo, endere√ßo e distrito dos clientes que moram no distrito da California e que cont√™m ‚Äúrene‚Äù em seus nomes. As informa√ß√µes podem ser encontradas nas tabelas address e customer.

SELECT
    c.first_name, c.email, c.address_id, a.address, a.district
FROM
    customer AS c
INNER JOIN
    address AS a ON c.address_id = a.address_id
WHERE
    a.district = 'California'
        AND c.first_name LIKE '%rene%';

-- Exiba o nome e a quantidade de endere√ßos dos clientes cadastrados. Ordene seus resultados por nomes de forma decrescente. Exiba somente os clientes ativos. As informa√ß√µes podem ser encontradas na tabela address e customer.

SELECT
    c.first_name,
    COUNT(a.address) AS `quantidade de endere√ßo`
FROM
    customer c
INNER JOIN
    address AS a ON a.address_id = c.address_id
WHERE
    c.active = 1
GROUP BY
    c.customer_id
ORDER BY
    first_name DESC,
    last_name DESC;


-- Monte uma query que exiba o nome, sobrenome e a m√©dia de valor (amount) paga aos funcion√°rios no ano de 2006. Use as tabelas payment e staff. Os resultados devem estar agrupados pelo nome e sobrenome do funcion√°rio.
SELECT
    stf.first_name,
    stf.last_name,
    AVG(pay.amount) AS `M√©dia de pagamento`
FROM
    staff AS stf
INNER JOIN
    payment pay ON stf.staff_id = pay.staff_id
WHERE
    YEAR(pay.payment_date) = 2006
GROUP BY stf.staff_id;

-- Monte uma query que exiba o id do ator, nome, id do filme e t√≠tulo do filme, usando as tabelas actor, film_actor e film. Dica: voc√™ precisar√° fazer mais de um JOIN na mesma query.

SELECT
    a.actor_id,
    a.first_name,
    f.film_id,
    f.title
FROM
    actor AS a
INNER JOIN
    film_actor AS fa ON a.actor_id = fa.actor_id
INNER JOIN
    film AS f ON f.film_id = fa.film_id;

-- Queremos saber o Nome das pessoas colaboradoras e suas respectivas ger√™ncias (manager) cujos departamentos (department) s√£o diferentes.

SELECT
    CONCAT(Employee.FIRST_NAME, " ", Employee.LAST_NAME) AS "Nome da Pessoa Colaboradora",
    CONCAT(Manager.FIRST_NAME, " ", Manager.LAST_NAME) AS "Nome Gerente"
FROM
	employees AS Employee
INNER JOIN
	employees AS Manager ON Employee.MANAGER_ID = Manager.EMPLOYEE_ID
WHERE
	employee.department_id <> manager.department_id;

-- Exiba o Nome e a quantidade de pessoas lideradas de cada pessoa gerente.
USE hr;

SELECT CONCAT(m.first_name,' ', m.last_name) AS 'gerente',  COUNT(e.first_name) AS 'gerenciados'
FROM employees AS m
INNER JOIN employees AS e ON e.manager_id = m.employee_id
GROUP BY m.employee_id;

-- Funcionario e seu respectivo gerente 

USE hr;

SELECT CONCAT(e.first_name,' ', e.last_name) AS 'empregado', CONCAT(m.first_name,' ', m.last_name) AS 'gerente'
FROM employees AS e
INNER JOIN employees AS m WHERE 	e.employee_id = m.manager_id

-- Exerc√≠cio 1: Utilizando o INNER JOIN, encontre as vendas nacionais (domestic_sales) e internacionais (international_sales) de cada filme.
SELECT
    m.title, b.domestic_sales, b.international_sales
FROM
    movies m
        INNER JOIN
    boxoffice b ON b.movie_id = m.id;
    --OU
SELECT title, domestic_sales, international_sales FROM BoxOffice, Movies WHERE movie_id = id;

-- üöÄ Exerc√≠cio 2: Utilizando o INNER JOIN, fa√ßa uma busca que retorne o n√∫mero de vendas para cada filme que possui um n√∫mero maior de vendas internacionais (international_sales) do que vendas nacionais (domestic_sales).
SELECT
    m.title,
    (b.domestic_sales + b.international_sales) AS "Vendas"
FROM
    movies m
        INNER JOIN
    boxoffice b ON b.movie_id = m.id
WHERE
    b.international_sales > b.domestic_sales;
    --OU
SELECT title, (domestic_sales + international_sales) AS 'vendas' FROM BoxOffice, Movies WHERE movie_id = id AND international_sales > domestic_sales;

-- üöÄ Exerc√≠cio 3: Utilizando o INNER JOIN, fa√ßa uma busca que retorne os filmes e sua avalia√ß√£o (rating) em ordem decrescente.

SELECT title, rating FROM Movies, BoxOffice WHERE movie_id = id ORDER BY rating DESC;
-- OU
SELECT
    m.title, b.rating
FROM
    Movies m
INNER JOIN
    BoxOffice b ON b.movie_id = m.id
ORDER BY b.rating DESC;

-- Exerc√≠cio 4: Utilizando o LEFT JOIN, fa√ßa uma busca que retorne todos os dados dos cinemas, mesmo os que n√£o possuem filmes em cartaz e, adicionalmente, os dados dos filmes que est√£o em cartaz nestes cinemas. Retorne os nomes dos cinemas em ordem alfab√©tica.

SELECT
    t.name,
    t.location,
    m.title,
    m.director,
    m.year,
    m.length_minutes
FROM
    theater t
LEFT JOIN
    movies m ON t.id = m.theater_id
ORDER BY t.name;

 -- Exerc√≠cio 5: Utilizando o RIGHT JOIN, fa√ßa uma busca que retorne todos os dados dos filmes, mesmo os que n√£o est√£o em cartaz e, adicionalmente, os dados dos cinemas que possuem estes filmes em cartaz. Retorne os nomes dos cinemas em ordem alfab√©tica.

SELECT
    t.name,
    t.location,
    m.theater_id,
    m.title,
    m.director,
    m.year,
    m.length_minutes
FROM
    Theater t
RIGHT JOIN
    Movies m ON t.id = m.theater_id
ORDER BY t.name;

 -- üöÄ Exerc√≠cio 6: Utilizando o INNER JOIN, selecione todas as informa√ß√µes dos filmes que est√£o em cartaz (possuem theater_id diferente de NULL) com avalia√ß√£o maior que 8.

SELECT a.*, rating FROM Movies AS a, BoxOffice WHERE id = movie_id AND rating > 8 AND theater_id IS NOT NULL

--OU

USE pixar;

SELECT
    m.id,
    m.title,
    m.director,
    m.year,
    m.length_minutes,
    m.theater_id
FROM
    movies m
INNER JOIN
    boxoffice b ON b.movie_id = m.id
WHERE
    b.rating > 8
        AND m.theater_id IS NOT NULL;